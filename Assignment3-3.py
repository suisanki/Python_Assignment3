class Stack():    def __init__(self):               self.stackList = []        def push(self,item):        self.stackList.append(item)        return        def pop(self):        if len(self.stackList) == 0:            raise ValueError("Stack list is already empty.\n")        else:            return self.stackList.pop()            def isEmpty(self):        if len(self.stackList) == 0:            return True        else:            return False            def size(self):        return len(self.stackList)    class Queue():    def __init__(self):               self.queueList = []            def enqueue(self,item):        self.queueList.insert(0,item)        return        def dequeue(self):        if len(self.queueList) == 0:            raise ValueError("Queue list is already empty.\n")        return self.queueList.pop()        def isEmpty(self):        if len(self.queueList) == 0:            return True        else:            return False            def size(self):        return len(self.queueList)                     if __name__ == "__main__":    while True:        try:            selector = input("Input ADT you would like to imprement (stack or queue): ")            if selector.lower() != "stack" and selector.lower() != "queue":                raise ValueError("Input not valid.")            else:                break        except ValueError as msg:            print(msg)            continue                if selector.lower() == "stack":        stack = Stack()        selectorFlag = 0        elif selector.lower() == "queue":        queue = Queue()        selectorFlag = 1            while True:        try:            if selectorFlag == 0:                command = input("Input command. Command list:\n push: Add value to the end of the list\n pop: Return last value of list\n isEmpty: Check if the list is empty or not\n size: Return length of the list\n quit: Shut down instance\n")                            if command == "push":                    item = input("Input item you want to push: ")                    stack.push(item)                    print(f"Item pushed. Current list: {stack.stackList}\n")                                    elif command == "pop":                    print(stack.pop())                    print(f"Item popped. Current list: {stack.stackList}\n")                            elif command == "isEmpty":                    print(stack.isEmpty())                    print(f"Current list: {stack.stackList}\n")                                    elif command == "size":                    print(stack.size())                    print(f"Current list: {stack.stackList}\n")                                elif command == "quit":                    break                                else:                    raise ValueError("Command not valid.")            if selectorFlag == 1:                command = input("Input command. Command list:\n enqueue: Add value to the beginning of the list\n dequeue: Return last value of list\n isEmpty: Check if the list is empty or not\n size: Return length of the list\n quit: Shut down instance\n")                            if command == "enqueue":                    item = input("Input item you want to push: ")                    queue.enqueue(item)                    print(f"Item enqueued. Current list: {queue.queueList}\n")                                    elif command == "dequeue":                    print(queue.dequeue())                    print(f"Item dequeued. Current list: {queue.queueList}\n")                            elif command == "isEmpty":                    print(queue.isEmpty())                    print(f"Current list: {queue.queueList}\n")                                    elif command == "size":                    print(queue.size())                    print(f"Current list: {queue.queueList}\n")                                elif command == "quit":                    break                                else:                    raise ValueError("Command not valid.")        except ValueError as msg:            print(msg)                continue